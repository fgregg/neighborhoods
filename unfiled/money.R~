library(maptools)
library(rgdal)
library(gstat)

standardize <- function(x) {
  mean.x <- mean(x[!is.infinite(x)])
  sd.x <- sd(x[!is.infinite(x)])
  return((x - mean.x)/sd.x)
}

truncate <- function(x, sd) {
  test.x <- standardize(x)
  ifelse(test.x < -1 * sd,
         NA,
         ifelse(test.x > sd,
                NA,
                test.x
                )
         )
}
  x[abs(standardize(x)) < sd] 
}

greyscale <- function(x, sd) {
  test.x <- standardize(x)
  ifelse(test.x < -1 * sd,
         0,
         ifelse(test.x > sd,
                1,
                (test.x + sd)/(2 * sd)
                )
         )
}

price.query <- "
select distinct
X(lat_long) as x,
Y(lat_long) as y,
price,
bedrooms
from location,
((select
  location_id,
  price,
  bedrooms
  from price, label
  where price.listing_id = label.listing_id)
 as d1)
where location.location_id = d1.location_id"


con <- dbConnect(MySQL(), dbname="neighborhood")
prices <- dbGetQuery(con, price.query)
dbDisconnect(con)

prices <- SpatialPointsDataFrame(coords=prices[,c(2,1)],
                                 prices[,-c(1,2)],
                                 proj4string=CRS("+proj=latlong")
                                 )
prices <- spTransform(prices,
                      CRS("+proj=utm +zone=16 +datum=NAD83")
                      )

x.lim <- c(median(prices@coords[,1]) - mad(prices@coords[,1])*3,
           median(prices@coords[,1]) + mad(prices@coords[,1])*3)
y.lim <- c(median(prices@coords[,2]) - mad(prices@coords[,2])*5,
           median(prices@coords[,2]) + mad(prices@coords[,2])*3)
x.range <- as.integer(x.lim)
y.range <- as.integer(y.lim)

prices <- prices[prices@coords[,1] <= x.lim[1] &


prices$log.prices.trunc <- truncate(log(prices$price/prices$bedrooms), 3)
bounded.prices <- prices[!is.na(prices$log.prices.trunc),]
g <- gstat(id="prices", formula=log.prices.trunc ~ 1, data = bounded.prices)

grd <- expand.grid(x=seq(from = x.range[1],
                         to= x.range[2],
                         100),
                   y=seq(from=y.range[1],
                         to=y.range[2],
                         100))
coordinates(grd) <- ~x+y
gridded(grd) <- TRUE
proj4string(grd) <- proj4string(prices)

p <- predict(g, model=vgm(model = "Gau", range=10), newdata=grd)

image(p, col=topo.colors(20))
#contour(p, add=TRUE, col="brown")
